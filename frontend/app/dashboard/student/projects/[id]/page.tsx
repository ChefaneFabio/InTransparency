'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Progress } from '@/components/ui/progress'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { 
  ArrowLeft, 
  Eye, 
  Heart, 
  Share, 
  Star,
  Github, 
  ExternalLink, 
  Download,
  Edit3,
  Trash2,
  MoreVertical,
  Calendar,
  Clock,
  Users,
  TrendingUp,
  Zap,
  Brain,
  Target,
  Award,
  BookOpen,
  Code,
  MessageSquare
} from 'lucide-react'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'

export default function ProjectDetailPage() {
  const params = useParams()
  const router = useRouter()
  const [project, setProject] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('overview')

  useEffect(() => {
    fetchProject()
  }, [params.id])

  const fetchProject = async () => {
    try {
      setLoading(true)
      // Mock project data
      const mockProject = {
        id: params.id,
        title: "AI-Powered Task Management System",
        description: "A comprehensive task management application built with React, Node.js, and OpenAI GPT-4. Features include intelligent task categorization, priority suggestions, and automated deadline estimates based on project complexity.",
        category: "web-development",
        status: "analyzed",
        visibility: "public",
        technologies: ["React", "TypeScript", "Node.js", "Express", "PostgreSQL", "OpenAI API", "Tailwind CSS", "Docker"],
        repositoryUrl: "https://github.com/username/ai-task-manager",
        liveUrl: "https://ai-task-manager.vercel.app",
        tags: ["productivity", "ai", "automation", "real-time"],
        collaborators: [
          { email: "john.doe@university.edu", name: "John Doe", role: "Full Stack Developer" },
          { email: "jane.smith@university.edu", name: "Jane Smith", role: "UI/UX Designer" }
        ],
        images: [
          "/api/placeholder/800/600",
          "/api/placeholder/800/600", 
          "/api/placeholder/800/600"
        ],
        createdAt: "2024-01-15T10:00:00Z",
        updatedAt: "2024-01-20T15:30:00Z",
        
        // AI Analysis Results
        aiAnalysis: {
          innovationScore: 87,
          complexityLevel: "Advanced",
          skillsIdentified: [
            "Full-Stack Development",
            "AI Integration", 
            "Database Design",
            "API Development",
            "UI/UX Design",
            "DevOps",
            "Problem Solving",
            "System Architecture"
          ],
          keyInsights: [
            "Demonstrates strong understanding of AI integration in web applications",
            "Shows proficiency in modern React patterns and TypeScript",
            "Excellent database design with proper normalization",
            "Implements real-time features using WebSocket technology",
            "Clean, maintainable code architecture following best practices"
          ],
          improvementSuggestions: [
            "Consider implementing automated testing for better code reliability",
            "Add comprehensive error handling for AI API failures",
            "Implement caching strategies for better performance",
            "Consider adding accessibility features for better inclusivity"
          ],
          marketRelevance: "High - Task management and AI integration are highly sought after skills in the current job market",
          estimatedDevelopmentTime: "3-4 months",
          difficultyRating: 4.2
        },
        
        // Project Stats
        stats: {
          views: 1247,
          likes: 89,
          shares: 23,
          downloads: 156,
          repositoryStars: 34,
          forks: 12,
          commits: 127,
          contributors: 2
        },
        
        // Professional Narratives Generated by AI
        narratives: {
          elevator: "I developed an AI-powered task management system that helps teams organize and prioritize work more efficiently. Using OpenAI's GPT-4, the application automatically categorizes tasks, suggests priorities, and estimates completion times, resulting in 40% improved team productivity in initial testing.",
          detailed: "This project represents my deep dive into AI integration within web applications. I built a comprehensive task management system from the ground up, implementing features like intelligent task categorization, automated priority suggestions, and smart deadline estimation. The technical stack includes React with TypeScript for the frontend, Node.js/Express for the backend, PostgreSQL for data persistence, and OpenAI's GPT-4 API for AI functionality. Key challenges included designing an efficient prompt engineering system, implementing real-time updates via WebSockets, and creating an intuitive interface that makes AI suggestions feel natural rather than intrusive. The project demonstrates my ability to combine cutting-edge AI technology with solid software engineering principles.",
          impact: "The system has been tested with three student organizations, showing measurable improvements in task completion rates and team coordination. Early adopters report 40% faster project completion times and significantly reduced scheduling conflicts."
        },
        
        // Job Matches
        jobMatches: [
          {
            id: 1,
            title: "Full Stack Developer",
            company: "TechStart Inc.",
            location: "San Francisco, CA",
            type: "Full-time",
            match: 94,
            salary: "$85k - $120k",
            skills: ["React", "Node.js", "TypeScript", "PostgreSQL"],
            logo: "/api/placeholder/40/40"
          },
          {
            id: 2,
            title: "AI Engineer",
            company: "InnovateLabs",
            location: "Remote",
            type: "Full-time", 
            match: 91,
            salary: "$90k - $130k",
            skills: ["AI Integration", "Python", "React", "API Development"],
            logo: "/api/placeholder/40/40"
          },
          {
            id: 3,
            title: "Frontend Developer",
            company: "DesignTech",
            location: "New York, NY",
            type: "Full-time",
            match: 88,
            salary: "$75k - $105k", 
            skills: ["React", "TypeScript", "Tailwind CSS", "UI/UX"],
            logo: "/api/placeholder/40/40"
          }
        ]
      }
      
      setProject(mockProject)
    } catch (error) {
      console.error('Failed to fetch project:', error)
    } finally {
      setLoading(false)
    }
  }

  const deleteProject = async () => {
    if (confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
      try {
        const response = await fetch(`/api/projects/${params.id}`, {
          method: 'DELETE',
        })
        if (response.ok) {
          router.push('/dashboard/student/projects')
        }
      } catch (error) {
        console.error('Failed to delete project:', error)
      }
    }
  }

  const shareProject = async () => {
    const url = `${window.location.origin}/projects/${project.id}`
    try {
      await navigator.share({
        title: project.title,
        text: project.description,
        url: url
      })
    } catch (error) {
      // Fallback to copying to clipboard
      navigator.clipboard.writeText(url)
      alert('Project link copied to clipboard!')
    }
  }

  if (loading) {
    return (
      <div className="space-y-8 animate-pulse">
        <div className="h-8 bg-gray-200 rounded w-1/3"></div>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <div className="h-64 bg-gray-200 rounded"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
          </div>
          <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 space-y-6">
            <div className="h-48 bg-gray-200 rounded"></div>
            <div className="h-32 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    )
  }

  if (!project) {
    return (
      <div className="text-center py-12">
        <h1 className="text-2xl font-bold text-gray-900 mb-4">Project Not Found</h1>
        <p className="text-gray-600 mb-6">The project you're looking for doesn't exist or has been removed.</p>
        <Button asChild>
          <Link href="/dashboard/student/projects">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Projects
          </Link>
        </Button>
      </div>
    )
  }

  return (
    <div className="max-w-7xl mx-auto space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/dashboard/student/projects">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Projects
            </Link>
          </Button>
        </div>
        
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="sm" onClick={shareProject}>
            <Share className="mr-2 h-4 w-4" />
            Share
          </Button>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem asChild>
                <Link href={`/dashboard/student/projects/${project.id}/edit`}>
                  <Edit3 className="mr-2 h-4 w-4" />
                  Edit Project
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link href={`/dashboard/student/projects/${project.id}/analytics`}>
                  <TrendingUp className="mr-2 h-4 w-4" />
                  View Analytics
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={deleteProject} className="text-red-600">
                <Trash2 className="mr-2 h-4 w-4" />
                Delete Project
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Project Header */}
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 space-y-6">
        <div>
          <div className="flex items-center space-x-3 mb-4">
            <h1 className="text-3xl font-bold text-gray-900">{project.title}</h1>
            <Badge variant={project.visibility === 'public' ? 'default' : 'secondary'}>
              {project.visibility}
            </Badge>
            <Badge variant="outline">{project.status}</Badge>
          </div>
          
          <p className="text-lg text-gray-600 mb-6">
            {project.description}
          </p>
          
          <div className="flex flex-wrap gap-4 text-sm text-gray-500">
            <span className="flex items-center">
              <Calendar className="h-4 w-4 mr-1" />
              Created {new Date(project.createdAt).toLocaleDateString()}
            </span>
            <span className="flex items-center">
              <Clock className="h-4 w-4 mr-1" />
              Updated {new Date(project.updatedAt).toLocaleDateString()}
            </span>
            <span className="flex items-center">
              <Users className="h-4 w-4 mr-1" />
              {project.collaborators.length + 1} Contributors
            </span>
          </div>
        </div>

        {/* Quick Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">{project.stats.views}</div>
              <div className="text-xs text-gray-500">Views</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-red-600">{project.stats.likes}</div>
              <div className="text-xs text-gray-500">Likes</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">{project.stats.shares}</div>
              <div className="text-xs text-gray-500">Shares</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">{project.stats.repositoryStars}</div>
              <div className="text-xs text-gray-500">Stars</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-orange-600">{project.stats.commits}</div>
              <div className="text-xs text-gray-500">Commits</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-indigo-600">{project.aiAnalysis.innovationScore}</div>
              <div className="text-xs text-gray-500">AI Score</div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Left Column - Main Content */}
        <div className="lg:col-span-2">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-4">
              <TabsTrigger value="overview">Overview</TabsTrigger>
              <TabsTrigger value="analysis">AI Analysis</TabsTrigger>
              <TabsTrigger value="narratives">Stories</TabsTrigger>
              <TabsTrigger value="jobs">Opportunities</TabsTrigger>
            </TabsList>
            
            <TabsContent value="overview" className="space-y-6">
              {/* Project Images */}
              {project.images.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>Project Screenshots</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {project.images.map((image: any, index: number) => (
                        <div key={index} className="aspect-video bg-gray-100 rounded-lg overflow-hidden">
                          <img 
                            src={image} 
                            alt={`Screenshot ${index + 1}`}
                            className="w-full h-full object-cover"
                          />
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
              
              {/* Technologies */}
              <Card>
                <CardHeader>
                  <CardTitle>Technologies Used</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {project.technologies.map((tech: any) => (
                      <Badge key={tech} variant="secondary">
                        {tech}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              {/* Tags */}
              {project.tags.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>Tags</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-wrap gap-2">
                      {project.tags.map((tag: any) => (
                        <Badge key={tag} variant="outline">
                          {tag}
                        </Badge>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
              
              {/* Collaborators */}
              {project.collaborators.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>Collaborators</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {project.collaborators.map((collab: any, index: number) => (
                        <div key={index} className="flex items-center space-x-3">
                          <Avatar>
                            <AvatarImage src={`/api/placeholder/32/32`} />
                            <AvatarFallback>
                              {collab.name.split(' ').map((n: any) => n[0]).join('')}
                            </AvatarFallback>
                          </Avatar>
                          <div>
                            <p className="font-medium text-gray-900">{collab.name}</p>
                            <p className="text-sm text-gray-500">{collab.role}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
            
            <TabsContent value="analysis" className="space-y-6">
              {/* Innovation Score */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Zap className="mr-2 h-5 w-5 text-yellow-500" />
                    Innovation Score
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl font-bold text-blue-600">
                      {project.aiAnalysis.innovationScore}/100
                    </div>
                    <div className="flex-1">
                      <Progress value={project.aiAnalysis.innovationScore} className="h-3" />
                      <p className="text-sm text-gray-500 mt-1">
                        {project.aiAnalysis.complexityLevel} Level
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
              
              {/* Skills Identified */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Target className="mr-2 h-5 w-5 text-green-500" />
                    Skills Demonstrated
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-2">
                    {project.aiAnalysis.skillsIdentified.map((skill: any) => (
                      <Badge key={skill} variant="outline" className="justify-center">
                        {skill}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
              
              {/* Key Insights */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Brain className="mr-2 h-5 w-5 text-purple-500" />
                    AI Insights
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {project.aiAnalysis.keyInsights.map((insight: any, index: number) => (
                      <li key={index} className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                        <span className="text-gray-700">{insight}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
              
              {/* Improvement Suggestions */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <TrendingUp className="mr-2 h-5 w-5 text-blue-500" />
                    Improvement Suggestions
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <ul className="space-y-2">
                    {project.aiAnalysis.improvementSuggestions.map((suggestion: any, index: number) => (
                      <li key={index} className="flex items-start space-x-2">
                        <div className="w-2 h-2 bg-orange-500 rounded-full mt-2 flex-shrink-0"></div>
                        <span className="text-gray-700">{suggestion}</span>
                      </li>
                    ))}
                  </ul>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="narratives" className="space-y-6">
              {/* Professional Narratives */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <MessageSquare className="mr-2 h-5 w-5 text-blue-500" />
                    Elevator Pitch
                  </CardTitle>
                  <CardDescription>Perfect for networking events and quick introductions</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 leading-relaxed">{project.narratives.elevator}</p>
                  <Button variant="outline" size="sm" className="mt-4">
                    <Download className="mr-2 h-4 w-4" />
                    Copy to Clipboard
                  </Button>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <BookOpen className="mr-2 h-5 w-5 text-green-500" />
                    Detailed Story
                  </CardTitle>
                  <CardDescription>For cover letters and detailed applications</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 leading-relaxed">{project.narratives.detailed}</p>
                  <Button variant="outline" size="sm" className="mt-4">
                    <Download className="mr-2 h-4 w-4" />
                    Copy to Clipboard
                  </Button>
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <Award className="mr-2 h-5 w-5 text-purple-500" />
                    Impact Statement
                  </CardTitle>
                  <CardDescription>Highlighting measurable results and outcomes</CardDescription>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-700 leading-relaxed">{project.narratives.impact}</p>
                  <Button variant="outline" size="sm" className="mt-4">
                    <Download className="mr-2 h-4 w-4" />
                    Copy to Clipboard
                  </Button>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="jobs" className="space-y-6">
              {/* Job Matches */}
              <div className="space-y-4">
                {project.jobMatches.map((job: any) => (
                  <Card key={job.id} className="hover:shadow-md transition-shadow">
                    <CardContent className="p-6">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-4">
                          <img 
                            src={job.logo} 
                            alt={job.company}
                            className="w-12 h-12 rounded-lg object-cover"
                          />
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-900">{job.title}</h3>
                            <p className="text-gray-600">{job.company}</p>
                            <p className="text-sm text-gray-500">{job.location} • {job.type}</p>
                            <p className="text-sm font-medium text-green-600 mt-1">{job.salary}</p>
                            
                            <div className="flex flex-wrap gap-1 mt-2">
                              {job.skills.map((skill: any) => (
                                <Badge key={skill} variant="secondary" className="text-xs">
                                  {skill}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                        
                        <div className="text-right">
                          <div className="text-2xl font-bold text-blue-600">{job.match}%</div>
                          <div className="text-xs text-gray-500">Match</div>
                          <Button size="sm" className="mt-3">
                            Apply Now
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>
          </Tabs>
        </div>
        
        {/* Right Column - Sidebar */}
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-50 space-y-6">
          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {project.repositoryUrl && (
                <Button variant="outline" className="w-full justify-start" asChild>
                  <a href={project.repositoryUrl} target="_blank" rel="noopener noreferrer">
                    <Github className="mr-2 h-4 w-4" />
                    View Repository
                  </a>
                </Button>
              )}
              {project.liveUrl && (
                <Button variant="outline" className="w-full justify-start" asChild>
                  <a href={project.liveUrl} target="_blank" rel="noopener noreferrer">
                    <ExternalLink className="mr-2 h-4 w-4" />
                    Live Demo
                  </a>
                </Button>
              )}
              <Button variant="outline" className="w-full justify-start">
                <Download className="mr-2 h-4 w-4" />
                Download Project
              </Button>
            </CardContent>
          </Card>
          
          {/* Project Health */}
          <Card>
            <CardHeader>
              <CardTitle>Project Health</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Innovation Score</span>
                <span className="font-semibold">{project.aiAnalysis.innovationScore}/100</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Complexity</span>
                <Badge variant="outline">{project.aiAnalysis.complexityLevel}</Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Market Relevance</span>
                <Badge variant="default">High</Badge>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">Difficulty Rating</span>
                <div className="flex items-center">
                  {[...Array(5)].map((_: any, i: number) => (
                    <Star 
                      key={i} 
                      className={`h-4 w-4 ${
                        i < Math.floor(project.aiAnalysis.difficultyRating) 
                          ? 'text-yellow-400 fill-current' 
                          : 'text-gray-300'
                      }`} 
                    />
                  ))}
                  <span className="ml-2 text-sm font-medium">
                    {project.aiAnalysis.difficultyRating}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
          
          {/* Recent Activity */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center space-x-3 text-sm">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span className="text-gray-600">AI analysis completed</span>
                <span className="text-gray-400">2h ago</span>
              </div>
              <div className="flex items-center space-x-3 text-sm">
                <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                <span className="text-gray-600">15 new job matches found</span>
                <span className="text-gray-400">1d ago</span>
              </div>
              <div className="flex items-center space-x-3 text-sm">
                <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                <span className="text-gray-600">Project viewed by recruiter</span>
                <span className="text-gray-400">2d ago</span>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}