name: Deploy to Vercel and Render

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Test and Build Frontend
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  # Test Backend API
  test-backend-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: intransparency_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/api/package-lock.json

      - name: Install API dependencies
        working-directory: ./backend/api
        run: npm ci

      - name: Run API linting
        working-directory: ./backend/api
        run: npm run lint

      - name: Run database migrations
        working-directory: ./backend/api
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/intransparency_test
        run: npm run db:migrate

      - name: Run API tests
        working-directory: ./backend/api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:password@localhost:5432/intransparency_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm test

      - name: Build API
        working-directory: ./backend/api
        run: npm run build

  # Test AI Service
  test-ai-service:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/ai-service/requirements.txt

      - name: Install AI service dependencies
        working-directory: ./backend/ai-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run AI service tests
        working-directory: ./backend/ai-service
        env:
          ENVIRONMENT: test
          OPENAI_API_KEY: test-key
        run: pytest

  # Deploy Frontend to Vercel
  deploy-frontend:
    needs: [test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        working-directory: ./frontend
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        working-directory: ./frontend
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        working-directory: ./frontend
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # Deploy Backend to Render
  deploy-backend:
    needs: [test-backend-api, test-ai-service]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy API to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_API_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Deploy AI Service to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_AI_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Integration Tests
  integration-tests:
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        run: npm install cypress @playwright/test

      - name: Wait for deployments
        run: sleep 60

      - name: Run integration tests
        env:
          CYPRESS_BASE_URL: https://intransparency.vercel.app
          PLAYWRIGHT_TEST_BASE_URL: https://intransparency.vercel.app
        run: |
          # Run basic smoke tests
          curl -f https://intransparency.vercel.app/health || exit 1
          curl -f https://api-intransparency.onrender.com/health || exit 1
          curl -f https://ai-intransparency.onrender.com/health || exit 1

  # Notify on deployment
  notify-deployment:
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}