name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Changed Files Detection
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend-api: ${{ steps.changes.outputs.backend-api }}
      ai-service: ${{ steps.changes.outputs.ai-service }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - 'shared/**'
            backend-api:
              - 'backend/api/**'
              - 'shared/**'
            ai-service:
              - 'backend/ai-service/**'
            shared:
              - 'shared/**'

  # Frontend Checks
  check-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Build
        working-directory: ./frontend
        run: npm run build

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend

  # Backend API Checks
  check-backend-api:
    needs: changes
    if: ${{ needs.changes.outputs.backend-api == 'true' }}
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: intransparency_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/api/package-lock.json

      - name: Install dependencies
        working-directory: ./backend/api
        run: npm ci

      - name: Run linting
        working-directory: ./backend/api
        run: npm run lint

      - name: Run database migrations
        working-directory: ./backend/api
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/intransparency_test
        run: npm run db:migrate

      - name: Run tests
        working-directory: ./backend/api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:password@localhost:5432/intransparency_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
        run: npm test -- --coverage

      - name: Build
        working-directory: ./backend/api
        run: npm run build

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/api/coverage
          flags: backend-api

  # AI Service Checks
  check-ai-service:
    needs: changes
    if: ${{ needs.changes.outputs.ai-service == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/ai-service/requirements.txt

      - name: Install dependencies
        working-directory: ./backend/ai-service
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov httpx black flake8 mypy

      - name: Run linting
        working-directory: ./backend/ai-service
        run: |
          black --check .
          flake8 .

      - name: Run type checking
        working-directory: ./backend/ai-service
        run: mypy . --ignore-missing-imports

      - name: Run tests
        working-directory: ./backend/ai-service
        env:
          ENVIRONMENT: test
          OPENAI_API_KEY: test-key
        run: pytest --cov=. --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/ai-service
          flags: ai-service

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Dependency Review
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3

  # Preview Deployment
  preview-deployment:
    needs: [check-frontend, check-backend-api, check-ai-service]
    if: always() && !failure() && !cancelled()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy preview to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Comment on PR
  comment-pr:
    needs: [preview-deployment]
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ## ðŸš€ Deployment Status
            
            âœ… **Preview deployed successfully!**
            
            - ðŸ”— **Preview URL**: [View deployment](https://intransparency-git-${{ github.head_ref }}.vercel.app)
            - ðŸ“Š **Checks**: ${{ needs.check-frontend.result }} (Frontend), ${{ needs.check-backend-api.result }} (API), ${{ needs.check-ai-service.result }} (AI)
            
            Changes will be automatically deployed to production after merge to main.
          comment_tag: deployment-status