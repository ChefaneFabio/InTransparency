version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: intransparency-db
    environment:
      POSTGRES_DB: intransparency
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/api/src/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - intransparency-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: intransparency-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - intransparency-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  api:
    build:
      context: .
      target: backend-builder
    container_name: intransparency-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-password}@postgres:5432/intransparency
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      AI_SERVICE_URL: http://ai-service:8000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - intransparency-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Service
  ai-service:
    build:
      context: .
      target: ai-service-builder
    container_name: intransparency-ai
    environment:
      ENVIRONMENT: ${NODE_ENV:-development}
      PORT: 8000
      AI_SERVICE_API_KEY: ${AI_SERVICE_API_KEY:-your-ai-service-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REDIS_URL: redis://:${REDIS_PASSWORD:-password}@redis:6379
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - intransparency-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      target: frontend-builder
    container_name: intransparency-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: http://api:3001/api
      NEXT_PUBLIC_AI_SERVICE_URL: http://ai-service:8000
      NEXT_PUBLIC_WEBSOCKET_URL: ws://api:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - intransparency-network

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: intransparency-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api
    networks:
      - intransparency-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  intransparency-network:
    driver: bridge